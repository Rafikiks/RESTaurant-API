#!/usr/bin/env node

/**
 * Dépendances du module.
 */

var app = require('../app');
var debug = require('debug')('01-restaurant-api-project:server');
var http = require('http');

/**
 * Récupère le port à partir de l'environnement et le stocke dans Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Création du serveur HTTP.
 */

var server = http.createServer(app);

/**
 * Écoute sur le port fourni, sur toutes les interfaces réseau.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalise un port en un nombre, une chaîne ou false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // canal nommé
    return val;
  }

  if (port >= 0) {
    // numéro de port
    return port;
  }

  return false;
}

/**
 * Gestionnaire d'événements pour l'événement "error" du serveur HTTP.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Canal ' + port
    : 'Port ' + port;

  // gérer les erreurs d'écoute spécifiques avec des messages explicites
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' nécessite des privilèges élevés');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' est déjà en cours d\'utilisation');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Gestionnaire d'événements pour l'événement "listening" du serveur HTTP.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'canal ' + addr
    : 'port ' + addr.port;
  debug('Écoute sur ' + bind);
}